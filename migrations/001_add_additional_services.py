"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è additional_services –≤ —Ç–∞–±–ª–∏—Ü—É cars
–û–ø–∏—Å–∞–Ω–∏–µ: –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É additional_services –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
"""
import sqlite3
from pathlib import Path


def migrate() -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é"""
    db_path = Path("baz_car.db")
    
    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞
        cursor.execute("PRAGMA table_info(cars)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'additional_services' in columns:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'additional_services' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ cars")
            conn.close()
            return True
        
        print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'additional_services' –≤ —Ç–∞–±–ª–∏—Ü—É cars...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É additional_services
        cursor.execute("""
            ALTER TABLE cars 
            ADD COLUMN additional_services TEXT DEFAULT '[]'
        """)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ø—É—Å—Ç–æ–π JSON –º–∞—Å—Å–∏–≤
        cursor.execute("""
            UPDATE cars 
            SET additional_services = '[]' 
            WHERE additional_services IS NULL
        """)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'additional_services' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º —É—Å–ª—É–≥")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        if 'conn' in locals():
            conn.close()
        return False
