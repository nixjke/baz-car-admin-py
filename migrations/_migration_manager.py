"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–≠—Ç–æ—Ç —Ñ–∞–π–ª –ù–ï —è–≤–ª—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏–µ–π, –∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
"""
import os
import sqlite3
import json
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime


class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î"""
    
    def __init__(self, db_path: str = "baz_car.db"):
        self.db_path = Path(db_path)
        self.migrations_table = "migrations_history"
        
    def create_migrations_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.migrations_table} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                migration_name TEXT UNIQUE NOT NULL,
                executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                success BOOLEAN DEFAULT TRUE,
                details TEXT
            )
        """)
        
        conn.commit()
        conn.close()
    
    def get_executed_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        if not self.db_path.exists():
            return []
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute(f"SELECT migration_name FROM {self.migrations_table} WHERE success = TRUE ORDER BY executed_at")
            return [row[0] for row in cursor.fetchall()]
        except sqlite3.OperationalError:
            # –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            return []
        finally:
            conn.close()
    
    def mark_migration_executed(self, migration_name: str, success: bool = True, details: str = ""):
        """–û—Ç–º–µ—á–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute(f"""
                INSERT OR REPLACE INTO {self.migrations_table} 
                (migration_name, success, details) 
                VALUES (?, ?, ?)
            """, (migration_name, success, details))
            
            conn.commit()
        finally:
            conn.close()
    
    def backup_database(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_path.exists():
            return ""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.db_path.parent / f"{self.db_path.stem}_backup_{timestamp}.db"
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import shutil
        shutil.copy2(self.db_path, backup_path)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        return str(backup_path)
    
    def get_available_migrations(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        migrations_dir = Path("migrations")
        migrations = []
        
        if not migrations_dir.exists():
            return migrations
        
        for file_path in sorted(migrations_dir.glob("*.py")):
            if file_path.name.startswith("__") or file_path.name.startswith("_"):
                continue
                
            migration_name = file_path.stem
            migrations.append({
                "name": migration_name,
                "file": str(file_path),
                "description": self._get_migration_description(file_path)
            })
        
        return migrations
    
    def _get_migration_description(self, file_path: Path) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
                lines = content.split('\n')
                for line in lines:
                    if line.strip().startswith('#') and 'description' in line.lower():
                        return line.strip().replace('#', '').strip()
                return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        except:
            return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    def run_migration(self, migration_name: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        migration_file = Path(f"migrations/{migration_name}.py")
        
        if not migration_file.exists():
            print(f"‚ùå –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_file}")
            return False
        
        try:
            print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_name}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            import importlib.util
            spec = importlib.util.spec_from_file_location(migration_name, migration_file)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏
            if hasattr(module, 'migrate'):
                result = module.migrate()
                if result:
                    self.mark_migration_executed(migration_name, True, "–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    self.mark_migration_executed(migration_name, False, "–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    print(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è {migration_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    return False
            else:
                print(f"‚ùå –§—É–Ω–∫—Ü–∏—è migrate() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {migration_name}")
                return False
                
        except Exception as e:
            self.mark_migration_executed(migration_name, False, f"–û—à–∏–±–∫–∞: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_name}: {e}")
            return False
    
    def run_all_pending_migrations(self, create_backup: bool = True) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π...")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
        self.create_migrations_table()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if create_backup and self.db_path.exists():
            self.backup_database()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        executed = self.get_executed_migrations()
        available = self.get_available_migrations()
        
        pending = [m for m in available if m["name"] not in executed]
        
        if not pending:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            return True
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending)} –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        for migration in pending:
            print(f"   - {migration['name']}: {migration['description']}")
        
        print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        success_count = 0
        for migration in pending:
            if self.run_migration(migration["name"]):
                success_count += 1
            else:
                print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ {migration['name']}")
                return False
        
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count} –∏–∑ {len(pending)} –º–∏–≥—Ä–∞—Ü–∏–π")
        return True
    
    def get_migration_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
        executed = self.get_executed_migrations()
        available = self.get_available_migrations()
        pending = [m for m in available if m["name"] not in executed]
        
        return {
            "total_available": len(available),
            "executed": len(executed),
            "pending": len(pending),
            "executed_migrations": executed,
            "pending_migrations": [m["name"] for m in pending]
        }
